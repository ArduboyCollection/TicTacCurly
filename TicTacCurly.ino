
#include "Arduboy2.h"
Arduboy2 ab;
int gamestate = 0;
int players = 0;
int turn = 0;
int loc = 0;
int xloc = 7;
int yloc = 7;
int a1 = 0;
int a2 = 0;
int a3 = 0;
int b1 = 0;
int b2 = 0;
int b3 = 0;
int c1 = 0;
int c2 = 0;
int c3 = 0;
int xwins = 0;
int owins = 0;
int ties = 0;
int emove = 0;
const unsigned char player[] PROGMEM  = {
0x3, 0x1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1, 0x3, 0x3, 0x2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2, 0x3, 
};
const unsigned char titles[] PROGMEM  = {
0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x7f, 0xbf, 0xdf, 0xef, 0xef, 0xf7, 0xef, 0xef, 0xdf, 0xdf, 0xbf, 0xbf, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf, 0xef, 0xdf, 0xdf, 0xdf, 0xbf, 0xbf, 0xbf, 0x7f, 0x7f, 0xff, 0xff, 0xff, 0x7f, 0x7f, 0x7f, 0xbf, 0xbf, 0x3f, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x7f, 0xbf, 0xbf, 0xbf, 0xdf, 0xdf, 0x3f, 0xff, 0xff, 0xff, 0x3f, 0xcf, 0xf7, 0xef, 0x9f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0x3f, 0xc7, 0xf9, 0xfd, 0xfe, 0xfe, 0xfe, 0xfd, 0xf3, 0xf3, 0xfd, 0xfe, 0xff, 0xff, 0xff, 0xc3, 0x3b, 0xfb, 0xfd, 0xfd, 0x1, 0xff, 0xff, 0xff, 0x7, 0xf8, 0xfe, 0x7d, 0x81, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0x3, 0xfb, 0xfb, 0xfb, 0xf7, 0xf7, 0xe3, 0xfc, 0xff, 0xff, 0xff, 0xf8, 0x7, 0xff, 0xff, 0x7, 0x78, 0xbf, 0xdf, 0x3f, 0xff, 0xff, 0xfe, 0xfd, 0xf3, 0xef, 0x1f, 0x9f, 0xff, 0xfc, 0xfb, 0xfc, 0x7f, 0xbf, 0xdf, 0xe7, 0xfb, 0xfd, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xdf, 0xbf, 0xbc, 0x63, 0xf7, 0xf7, 0xfb, 0x73, 0x7b, 0xbb, 0xc1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x8f, 0xbf, 0xbf, 0x7c, 0x73, 0x7b, 0x78, 0xbf, 0xbf, 0xbf, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xef, 0xef, 0xdf, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x87, 0xdf, 0xee, 0xf7, 0xf7, 0xfb, 0xfd, 0xfe, 0xff, 0xff, 0xf7, 0xe9, 0xde, 0xbf, 0xdf, 0xef, 0xf3, 0xfd, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x7f, 0x7f, 0x7f, 0xbf, 0xbf, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfd, 0xfe, 0xff, 0xff, 0xff, 0x3f, 0xff, 0xef, 0xdf, 0xdf, 0xf, 0xb3, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf, 0xb0, 0xbe, 0x7d, 0x7d, 0x7d, 0x7d, 0xfb, 0xfb, 0xfb, 0xf7, 0xf7, 0x77, 0x77, 0xef, 0xef, 0xef, 0xef, 0xf7, 0xf7, 0xf7, 0x17, 0xe7, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x9f, 0xe7, 0xf7, 0x37, 0xd7, 0x97, 0x77, 0xf7, 0x87, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0xc1, 0xfd, 0x3e, 0xce, 0xe6, 0xef, 0xef, 0xf7, 0xf7, 0xe7, 0xef, 0xf6, 0xf1, 0xf7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x87, 0xf7, 0x2f, 0xcf, 0xff, 0xf9, 0xc7, 0x3f, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x7f, 0xbf, 0xb8, 0xc7, 0x1f, 0xec, 0xef, 0xf7, 0xf7, 0xfb, 0xfb, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x42, 0x7c, 0xff, 0xff, 0x7, 0xf8, 0xff, 0xfe, 0xfe, 0xfe, 0xfd, 0xfd, 0xfb, 0xf9, 0xfe, 0xff, 0x9f, 0xa7, 0x7b, 0x7c, 0xff, 0x3f, 0xcf, 0xf3, 0xf8, 0xc6, 0x3e, 0x7e, 0x7f, 0xbf, 0xa0, 0x1f, 0xbf, 0xff, 0xff, 0xff, 0xf8, 0xf7, 0xf7, 0xef, 0xde, 0xbd, 0xb3, 0x77, 0x7b, 0xbb, 0xbd, 0xd1, 0xcf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x7f, 0xbf, 0xdf, 0xdf, 0xef, 0xf7, 0xf7, 0xe1, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xfb, 0xdd, 0xec, 0xed, 0xf7, 0xf7, 0xfb, 0xfa, 0xf1, 0x8d, 0x7a, 0xfa, 0x97, 0xe7, 0xe9, 0xee, 0xdf, 0xfe, 0x79, 0x47, 0x3f, 0xbf, 0xdf, 0xdf, 0xef, 0x6f, 0xb7, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xfe, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0xbf, 0xbf, 0xbf, 0xbf, 0xdf, 0xdf, 0xde, 0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0xef, 0xef, 0xef, 0xef, 0xf, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0xdf, 0xef, 0xef, 0xf7, 0xff, 0x77, 0x77, 0xef, 0xef, 0x9f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0x7f, 0xbf, 0x5f, 0x6f, 0xb7, 0x3b, 0xfd, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xbf, 0xbf, 0xdf, 0xdf, 0x6f, 0xaf, 0xf4, 0xe3, 0x1b, 0xfb, 0xfd, 0xfd, 0xfe, 0xfe, 0xff, 0xff, 0xfe, 0xf1, 0xcf, 0xff, 0xf9, 0xf6, 0xef, 0xf6, 0xf9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xfb, 0xfb, 0xfb, 0xf7, 0x37, 0xc7, 0xff, 0xff, 0xff, 0x7, 0xf7, 0xf7, 0xf7, 0xfb, 0xfb, 0xfb, 0xfb, 0xf8, 0xff, 0xff, 0xff, 0x3f, 0xc1, 0xfe, 0xff, 0xff, 0x1, 0xbe, 0xbe, 0xdf, 0xc0, 0xff, 0xff, 0x3f, 0xcc, 0xf3, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xfe, 0x86, 0xb7, 0xd7, 0xdb, 0xdb, 0xe8, 0xf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xe6, 0xf9, 0xfc, 0xfd, 0xfb, 0xfb, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xfd, 0xfd, 0xfb, 0xfb, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfd, 0xfb, 0xfb, 0xf7, 0xef, 0xf7, 0xf7, 0xfb, 0xfb, 0xfd, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xef, 0xf7, 0xf7, 0xf7, 0xfb, 0xfb, 0xfb, 0xfb, 0xfd, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
};

void setup() {
  ab.begin();
  ab.setFrameRate(1);
  ab.initRandomSeed();
  ab.clear(); 
  
}
void loop() {
  if (!(ab.nextFrame()))
    return;
    ab.clear();
    
  if (gamestate >= 3) {
  gamestate = 1;
  }
  if (gamestate == 0) {
       ab.drawBitmap((0), (0), titles, 128, 64, WHITE);
      if (ab.pressed(A_BUTTON)) {
        gamestate += 1;
      }
    } // checked only void loop left open
  if (gamestate == 1) { //open one
      ab.setCursor((49), (0)); 
      ab.print("players");

          if(ab.pressed(RIGHT_BUTTON) && (players == 0)) { // open 2
              players += 1;
    } // close 2
          if(ab.pressed(LEFT_BUTTON) && (players == 1)) { //open 3
            players -= 1;
    } // close 3
          if(ab.pressed(A_BUTTON)) { //open 4
            gamestate += 1;
    } // close 4
          if (players == 0) { // open 5
            ab.setCursor((49), (49)); 
            ab.print("1");
      } // close 5
          else if (players == 1) { // open 6
            ab.setCursor((49), (49)); 
            ab.print("2");
      } // close 6
          else if (players >= 2) { // open 7
          players = 0;
      } // close 7
  } // close gamestate 1
   if (gamestate == 2) {

      //make enemy move and stuff
      if ((players == 0) && (turn == 1)) {
        emove = rand() % 8 + 1;
      }
        if ((emove == 1) && (a1 == 0)); {
         a1 = 2;
         turn += 1; 
      }
        else if ((emove == 2) && (a2 == 0)); {
         a2 = 2; 
         turn += 1;
      }
        else if ((emove == 3) && (a3 == 0)); {
         a3 = 2;
         turn += 1; 
      }
        else if ((emove == 4) && (b1 == 0)); {
         b1 = 2;
         turn += 1; 
      }
        else if ((emove == 5) && (b2 == 0)); {
         b2 = 2; 
         turn += 1;
      }
        else if ((emove == 6) && (b3 == 0)); {
         b3 = 2; 
         turn += 1;
      }
        else if ((emove == 7) && (c1 == 0)); {
         c1 = 2; 
         turn += 1;
      }
         else if ((emove == 8) && (c2 == 0)); {
         c2 = 2; 
         turn += 1;
      }
         else if ((emove == 9) && (c3 == 0)); {
         b2 = 2; 
         turn += 1;
      }
         else {
        emove = rand() % 8 + 1;
      
    }
    // pulled one out 
 // test stuff get rid of eventualy
 ab.setCursor((70), (0)); 
  ab.print("X WINS");
  ab.setCursor((110), (0)); 
  ab.print(xloc);
   ab.setCursor((70), (15)); 
  ab.print("O WINS");
  ab.setCursor((110), (15)); 
  ab.print(yloc);
  
  ab.setCursor((70), (30));
  ab.print("TIES");
  ab.setCursor((110), (30)); 
  ab.print(ties);
  ab.setCursor((110), (45));
  ab.setCursor((70), (45));
  ab.print("emove"); 
  ab.print(emove);
 // end test stuff
 ab.drawBitmap((xloc - 2), (yloc - 1), player, 10, 10, WHITE);
   if (turn >= 3) {
    turn = 1;
   }
   if ((xloc == 7) && (yloc == 7) && (ab.pressed(A_BUTTON)) && (a1 == 0)) {
    a1 = turn;
    turn += 1;
   }
   if ((xloc == 28) && (yloc == 7) && (ab.pressed(A_BUTTON)) && (a2 == 0)) {
    a2 = turn;
    turn += 1;
   }
   if ((xloc == 49) && (yloc == 7) && (ab.pressed(A_BUTTON)) && (a3 == 0)) {
    a3 = turn;
    turn += 1;
   }
   if ((xloc == 7) && (yloc == 28) && (ab.pressed(A_BUTTON)) && (b1 == 0)) {
    b1 = turn;
    turn += 1;
   }
   if ((xloc == 28) && (yloc == 28) && (ab.pressed(A_BUTTON)) && (b2 == 0)) {
    b2 = turn;
    turn += 1;
   }
   if ((xloc == 49) && (yloc == 28) && (ab.pressed(A_BUTTON)) && (b3 == 0)) {
    b3 = turn;
    turn += 1;
   }
   if ((xloc == 7) && (yloc == 49) && (ab.pressed(A_BUTTON)) && (c1 == 0)) {
    c1 = turn;
    turn += 1;
   }
   if ((xloc == 28) && (yloc == 49) && (ab.pressed(A_BUTTON)) && (c2 == 0)) {
    c2 = turn;
    turn += 1;
   }
   if ((xloc == 49) && (yloc == 49) && (ab.pressed(A_BUTTON)) && (c3 == 0)) {
    c3 = turn;
    turn += 1;
   }
  
    if(ab.pressed(LEFT_BUTTON) && (xloc >= 21)) {
      xloc -= 21;
    }
    if(ab.pressed(RIGHT_BUTTON) && (xloc <= 42)) {
      xloc += 21;
    }
    if(ab.pressed(UP_BUTTON) && (yloc >= 21)) {
      yloc -= 21;
    }
    if(ab.pressed(DOWN_BUTTON) && (yloc <= 42)) {
      yloc += 21;
    }
  
  if (turn == 1) {
  ab.setCursor((xloc), (yloc)); 
  ab.print("X");
  }
  else if (turn == 2) {
  ab.setCursor((xloc), (yloc)); 
  ab.print("O");   
  }
ab.drawFastVLine(21,0,63,WHITE);   //LEFT line
ab.drawFastVLine(42,0,63,WHITE);  //RIGHT line
ab.drawFastHLine(0,21,63,WHITE);   //TOP line
ab.drawFastHLine(0,42,63,WHITE);  //BOTTOM line
if (a1 >= 1) {
 if (a1 == 1) {
    ab.setCursor((7), (7)); 
  ab.print("X");
  }
 if (a1 == 2) {
    ab.setCursor((7), (7)); 
  ab.print("O");
  }
}
if (a2 >= 1) {
 if (a2 == 1) {
    ab.setCursor((28), (7)); 
  ab.print("X");
  }
 if (a2 == 2) {
    ab.setCursor((28), (7)); 
  ab.print("O");
  }
}
if (a3 >= 1) {
  if (a3 == 1) {
    ab.setCursor((49), (7)); 
  ab.print("X");
  }
 if (a3 == 2) {
    ab.setCursor((49), (7)); 
  ab.print("O");
  }
}
if (b1 >= 1) {
 if (b1 == 1) {
    ab.setCursor((7), (28)); 
  ab.print("X");
  }
 if (b1 == 2) {
    ab.setCursor((7), (28)); 
  ab.print("O");
  }
}
if (b2 >= 1) {
 if (b2 == 1) {
    ab.setCursor((28), (28)); 
  ab.print("X");
  }
 if (b2 == 2) {
    ab.setCursor((28), (28)); 
  ab.print("O");
  }
}
if (b3 >= 1) {
 if (b3 == 1) {
    ab.setCursor((49), (28)); 
  ab.print("X");
  }
 if (b3 == 2) {
    ab.setCursor((49), (28)); 
  ab.print("O");
  }
}
if (c1 >= 1) {
 if (c1 == 1) {
    ab.setCursor((7), (49)); 
  ab.print("X");
  }
 if (c1 == 2) {
    ab.setCursor((7), (49)); 
  ab.print("O");
  }
}
if (c2 >= 1) {
 if (c2 == 1) {
    ab.setCursor((28), (49)); 
  ab.print("X");
  }
 if (c2 == 2) {
    ab.setCursor((28), (49)); 
  ab.print("O");
  }
}
if (c3 >= 1) {
 if (c3 == 1) {
    ab.setCursor((49), (49)); 
  ab.print("X");
  }
 if (c3 == 2) {
    ab.setCursor((49), (49)); 
  ab.print("O");
  }
}


if ((a1 == 1) && (a2 == 1) && (a3 == 1) or (b1 == 1) && (b2 == 1) && (b3 == 1) or (c1 == 1) && (c2 == 1) && (c3 == 1) or (a1 == 1) && (b1 == 1) && (c1 == 1) or (a2 == 1) && (b2 == 1) && (c2 == 1) or (a3 == 1) && (b3 == 1) && (c3 == 1) or (a1 == 1) && (b2 == 1) && (c3 == 1) or (a3 == 1) && (b2 == 1) && (c1 == 1)) {
  xwins += 1;
  a1 = 0;
  a2 = 0;
  a3 = 0;
  b1 = 0;
  b2 = 0;
  b3 = 0;
  c1 = 0;
  c2 = 0;
  c3 = 0;
}
if ((a1 == 2) && (a2 == 2) && (a3 == 2) or (b1 == 2) && (b2 == 2) && (b3 == 2) or (c1 == 2) && (c2 == 2) && (c3 == 2) or (a1 == 2) && (b1 == 2) && (c1 == 2) or (a2 == 2) && (b2 == 2) && (c2 == 2) or (a3 == 2) && (b3 == 2) && (c3 == 2) or (a1 == 2) && (b2 == 2) && (c3 == 2) or (a3 == 2) && (b2 == 2) && (c1 == 2)) {
  owins += 1;
  a1 = 0;
  a2 = 0;
  a3 = 0;
  b1 = 0;
  b2 = 0;
  b3 = 0;
  c1 = 0;
  c2 = 0;
  c3 = 0;
}
if ((a1 >=1) && (a2 >=1) &&( a3 >=1) && (b1 >=1) && (b2 >=1) && (b3 >=1) && (c1 >=1) && (c2 >=1) && (c3 >=1)){
  ties += 1;
  a1 = 0;
  a2 = 0;
  a3 = 0;
  b1 = 0;
  b2 = 0;
  b3 = 0;
  c1 = 0;
  c2 = 0;
  c3 = 0;
}
    
    
  ab.display();
}
